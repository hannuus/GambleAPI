<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	         http://www.springframework.org/schema/beans/spring-beans.xsd
	         http://www.springframework.org/schema/lang
	         http://www.springframework.org/schema/lang/spring-lang.xsd      
	         http://www.springframework.org/schema/tx   
	         http://www.springframework.org/schema/tx/spring-tx.xsd    
	         http://www.springframework.org/schema/aop     
	         http://www.springframework.org/schema/aop/spring-aop.xsd    
	         http://www.springframework.org/schema/mvc     
	         http://www.springframework.org/schema/mvc/spring-mvc.xsd   
	         http://www.springframework.org/schema/context     
	         http://www.springframework.org/schema/context/spring-context.xsd
	         http://www.springframework.org/schema/cache
	         http://www.springframework.org/schema/cache/spring-cache.xsd
	         http://www.springframework.org/schema/task 
	         http://www.springframework.org/schema/task/spring-task.xsd">

	<import resource="classpath:/spring/spring-timetask.xml" />

	<!-- 自动扫描的包名 -->
	<context:component-scan base-package="com.hannuus.gamble.web.service"></context:component-scan>
	<context:component-scan base-package="com.hannuus.gamble.web.security"></context:component-scan>
	<context:component-scan base-package="com.hannuus.gamble.web.task"></context:component-scan>

	<task:annotation-driven />

	<!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="default" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="config" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="folder" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="article" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="media" />
			</set>
		</property>
	</bean>

	<!-- 在XML配置文件中加入外部属性文件，当然也可以指定外部文件的编码 -->
	<bean id="propertyConfigurer" class="com.hannuus.gamble.utils.GambleUtils.Property">
		<property name="locations">
			<list>
				<value>classpath:gamble.properties</value> <!-- 指定外部文件的编码 -->
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="defaultAutoCommit" value="true"></property>
		<property name="maxActive" value="${jdbc.maxPoolSize}"></property>
		<property name="maxIdle" value="${jdbc.minPoolSize}"></property>
		<property name="maxWait" value="${jdbc.initialPoolSize}"></property>
	</bean>

	<!-- 创建SqlSessionFactory，同时指定数据源 -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.hannuus.gamble.model" />
		<property name="mapperLocations">
			<list>
				<value>classpath:/com/hannuus/gamble/dao/mapper/*.xml</value>
			</list>
		</property>
	</bean>

	<!--创建数据映射器，数据映射器必须为接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- <property name="annotationClass" value="org.springframework.stereotype.Repository" 
			/> -->
		<property name="basePackage" value="com.hannuus.gamble.dao" />
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置事务的切入点 -->
	<aop:config>
		<aop:pointcut id="targetMethod"
			expression="execution(* com.hannuus.gamble.web.service.impl.*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="targetMethod" />
	</aop:config>

	<!-- 开启基于@AspectJ切面的注解处理器 -->
	<aop:aspectj-autoproxy />
	<bean id="logAspectJ" class="com.hannuus.gamble.web.service.impl.LogAspectJ" />

	<!-- Apache Shiro -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/index.htm"></property>
		<property name="unauthorizedUrl" value="/unauthorized.htm"></property>
		<property name="filterChainDefinitions">
			<value>
				<!-- 放开所有权限 -->
				<!-- /**=anon -->
				<!-- 常规配置 -->
				/index.htm=anon
				/api/login.json*=anon
				/api/test/login=anon
				/api/auth/**=roles[admin]
				/api/global/**=roles[admin]
				/api/thirdparty/**=roles[admin]
				/**=authc
			</value>
		</property>
	</bean>

</beans>
